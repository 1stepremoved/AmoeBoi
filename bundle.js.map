{"version":3,"sources":["webpack:///webpack/bootstrap 7f575dfe5612eb02c4a1","webpack:///./main.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA,uDAAuD,gBAAgB;AACvE,uDAAuD,iBAAiB;AACxE,uDAAuD,iBAAiB;AACxE;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,wCAAwC;AACxC;AACA;AACA;AACA;AACA;;AAEA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"./bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 7f575dfe5612eb02c4a1","\nwindow.momentumDelta = 1;\nwindow.massDelta = 3000;\nwindow.momentumMax = 10;\nwindow.maxZoom = 2;\nwindow.minZoom = 1;\nwindow.currentZoom = window.minZoom;\nwindow.realBoardHeight = 10000;\nwindow.realBoardWidth = 10000;\nwindow.boardFocus = {x: 5000, y: 5000};\nwindow.timeCoefficient = 1;\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  window.onresize = ()=>{\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n  };\n\n  window.addEventListener(\"keydown\", (e) => {\n    switch (e.keyCode) {\n      case 39:\n        window.timeCoefficient = Math.min(window.timeCoefficient * 1.1, 10);\n        return;\n      case 37:\n        window.timeCoefficient = Math.max(window.timeCoefficient * 0.9, 0.5);\n        return;\n      default:\n        return;\n    }\n  });\n\n  document.addEventListener(\"mousewheel\", (e)=> {\n    e.preventDefault();\n    let zoomDelta = (e.deltaY / -1000);\n    window.currentZoom = boundNum(window.currentZoom + zoomDelta, window.minZoom, window.maxZoom);\n  });\n\n  const canvas = document.getElementById(\"background\");\n  const ctx = canvas.getContext(\"2d\");\n  canvas.width = window.innerWidth;\n  canvas.height = window.innerHeight;\n\n  let amoebas = [];\n  for (let i = 0; i < 30; i++) {\n    amoebas.push(new Amoeba(ctx));\n  }\n  // amoebas.push(new Amoeba(ctx, 4900, 5000, 100000, {x: 100000, y: 0}));\n  // amoebas.push(new Amoeba(ctx, 5100, 5000, 100000, {x: -100000, y: 0}));\n  // amoebas.push(new Amoeba(ctx, 5300, 5000, 100000, {x: -100000, y: 0}));\n  let animate = () => {\n    ctx.clearRect(0,0, innerWidth, innerHeight);\n    amoebas = amoebas.filter(amoeba => {\n      return amoeba.radius > 0;\n    });\n    amoebas.forEach(amoeba => {\n      amoebas.forEach(amoeba2 =>{\n        if (amoeba2 !== amoeba){\n          amoeba.aabbCheck(amoeba2);\n        }\n      });\n      amoeba.wallCollision();\n    });\n    amoebas.forEach(amoeba => {\n      amoeba.move();\n      amoeba.draw();\n    });\n    makeMargins(ctx);\n    requestAnimationFrame(animate);\n  };\n  requestAnimationFrame(animate);\n});\n\nconst makeMargins = (ctx) => {\n  ctx.globalAlpha = 0.7;\n  ctx.fillStyle = \"black\";\n  let marginHeight = Math.floor(window.innerHeight / 8);\n  let marginWidth = Math.floor(window.innerWidth / 8);\n  ctx.fillRect(0,0, window.innerWidth, marginHeight);\n  ctx.fillRect(0,  window.innerHeight - marginHeight, window.innerWidth, window.innerHeight);\n  ctx.fillRect(0, marginHeight, marginWidth, window.innerHeight - (marginHeight * 2));\n  ctx.fillRect(window.innerWidth - marginWidth, marginHeight, window.innerWidth, window.innerHeight - (marginHeight * 2));\n  ctx.globalAlpha = 1;\n};\n\nconst boundNum = (num, min, max) => {\n  if (num > max) {\n    return max;\n  } else if (num < min) {\n    return min;\n  } else {\n    return num;\n  }\n};\n\nclass Amoeba {\n  constructor(ctx, x, y, mass, momentum) {\n    this.ctx = ctx;\n    this.mass = mass || Math.floor((Math.random() * 100000) + 10000);\n    this.radius = Math.sqrt(this.mass / (Math.PI));\n    this.xpos = x || Math.floor(Math.random() * (window.realBoardWidth - this.radius)) + this.radius;\n    this.ypos = y || Math.floor(Math.random() * (window.realBoardHeight - this.radius)) + this.radius;\n    this.momentum = momentum || {x: Math.floor(Math.random() * 100000) - 50000, y: Math.floor(Math.random() * 100000) - 50000};\n    this.nextMomentum = Object.assign({}, this.momentum);\n    this.draw = this.draw.bind(this);\n    this.collision = this.collision.bind(this);\n    this.adjustRadius = this.adjustRadius.bind(this);\n    this.color = \"blue\";\n  }\n\n  move() {\n    this.momentum = Object.assign({}, this.nextMomentum);\n    let xDelta = this.momentum['x'] / this.mass;\n    let yDelta = this.momentum['y'] / this.mass;\n    xDelta = (xDelta > window.momentumMax) ? Math.abs(xDelta) / xDelta * window.momentumMax : xDelta;\n    yDelta = (yDelta > window.momentumMax) ? Math.abs(yDelta) / yDelta * window.momentumMax : yDelta;\n    this.xpos += xDelta * window.timeCoefficient;\n    this.ypos += yDelta * window.timeCoefficient;\n  }\n\n  adjustRadius() {\n    this.radius = Math.sqrt(this.mass / (Math.PI));\n  }\n\n  aabbCheck(amoeba) {\n    if (amoeba.xpos + amoeba.radius + this.radius > this.xpos\n     && amoeba.xpos < this.xpos + this.radius + amoeba.radius\n     && amoeba.ypos + amoeba.radius + this.radius > this.ypos\n     && amoeba.ypos < this.ypos + this.radius + amoeba.radius) {\n      this.collision(amoeba);\n     }\n}\n\n  collision(amoeba) {\n    let distance = this.radius + amoeba.radius;\n    let currentDistance = Math.sqrt(\n      Math.pow(this.xpos - amoeba.xpos ,2)  + Math.pow(this.ypos - amoeba.ypos ,2)\n    );\n    if (distance > currentDistance){\n\n      this.nextMomentum['x'] += boundNum(amoeba.momentum['x']\n        * amoeba.mass * (currentDistance / distance) * window.timeCoefficient, -50, 50);\n      amoeba.nextMomentum['x'] = amoeba.nextMomentum['x']\n        * boundNum(amoeba.mass / this.mass, .99, 1);\n      this.nextMomentum['y'] += boundNum(amoeba.momentum['y']\n        * amoeba.mass * (currentDistance / distance) * window.timeCoefficient, -50, 50);\n      amoeba.nextMomentum['y'] = amoeba.nextMomentum['y']\n        * boundNum(amoeba.mass / this.mass, .99, 1);\n\n      if (this.mass <= amoeba.mass) {\n        if ((currentDistance - amoeba.radius) / this.radius < 0 || this.mass < 100) {\n          amoeba.mass += this.mass;\n          this.mass = 0;\n          amoeba.nextMomentum['x'] += this.nextMomentum['x'];\n          amoeba.nextMomentum['y'] += this.nextMomentum['y'];\n          return;\n        }\n\n        let bubble = window.massDelta\n            * boundNum( (this.radius - (currentDistance - amoeba.radius)) / this.radius, .1, 1)\n            * window.timeCoefficient;\n\n        this.mass -= bubble;\n        amoeba.mass += bubble;\n      }\n    }\n  }\n\n\n\n  wallCollision() {\n    if (this.xpos + this.radius >= window.realBoardWidth) {\n      this.nextMomentum['x'] = -1 * this.momentum['x'];\n      this.xpos = window.realBoardWidth - this.radius - 1;\n    } else if (this.xpos - this.radius <= 0) {\n      this.nextMomentum['x'] = -1 * this.momentum['x'];\n      this.xpos = 0 + this.radius + 1;\n    }\n    if (this.ypos + this.radius >= window.realBoardHeight) {\n      this.nextMomentum['y'] = -1 * this.momentum['y'];\n      this.ypos = window.realBoardHeight - this.radius - 1;\n    } else if (this.ypos - this.radius <= 0) {\n      this.nextMomentum['y'] = -1 * this.momentum['y'];\n      this.ypos = 0 + this.radius + 1;\n    }\n  }\n\n  draw() {\n    this.adjustRadius();\n    let boardHeight = window.realBoardHeight / window.currentZoom;\n    let boardWidth = window.realBoardWidth / window.currentZoom;\n\n    let relativeX = (((this.xpos - window.boardFocus['x']) / (boardWidth / 2)) * (innerWidth / 2)) + (innerWidth / 2);\n    let relativeY = (this.ypos - window.boardFocus['y']) / (boardHeight/ 2) * (innerHeight / 2) + (innerHeight / 2);\n\n    let relativeRadius = this.radius / window.realBoardWidth * window.innerWidth * window.currentZoom;\n\n    this.ctx.beginPath();\n    this.ctx.arc(relativeX, relativeY, relativeRadius, 0, Math.PI * 2);\n    this.ctx.fillStyle=\"blue\";\n    this.ctx.fill();\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./main.js\n// module id = 0\n// module chunks = 0"],"sourceRoot":""}